<?php

global $directions;
global $alphabet;
$directions = array(
    'l'=>'left',
    'r'=>'right',
);
$alphabet = array(
    '1' => 'a',
    '2' => 'b',
    '3' => 'c',
    '4' => 'd',
    '5' => 'e',
    '6' => 'f',
    '7' => 'g',
    '8' => 'h',
    '9' => 'i',
    '10' => 'j',
    '11' => 'k',
    '12' => 'l',
    '13' => 'm',
    '14' => 'n',
    '15' => 'o',
    '16' => 'p',
    '17' => 'q',
    '18' => 'r',
    '19' => 's',
    '20' => 't',
    '21' => 'u',
    '22' => 'v',
    '23' => 'w',
    '24' => 'x',
    '25' => 'y',
    '26' => 'z',
);
//QUESTION:  https://www.drupal.org/coding-standards  says that indenting should be 2 spaces... our examples have always used php's 4.
function shift_cipher_menu(){
    $items['shift_cipher'] = array(
        'title' => "Shift Cipher",
        'access callback' => TRUE,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('shift_cipher_form'),
        'type'=> MENU_NORMAL_ITEM,
    );
    $items['shift_cipher_encoded'] = array(
        'title' => 'Shifted Text',
        'access callback' => TRUE,
        'page callback' => 'shift_cipher_encoded',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function shift_cipher_form(){
    $form['shift_value'] = array(
        '#title' => 'Shift Value',
        '#type' => 'textfield',
        '#description' => 'Enter the number of positions to shift',
        '#element_validate' => array( 'element_validate_integer_positive'),
        '#required' => TRUE,
    );

    $form['shift_direction'] = array(
        '#title' => 'Shift direction',
        '#type' => 'textfield',
        '#description' => 'Enter the direction (left or right) shift',
        '#required' => TRUE,
    );

    $form['shift_phrase'] = array(
        '#title' => 'Phrase to encode',
        '#type' => 'textfield',
        '#description' => 'Enter a phrase to encode',
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Encode your Phrase',
    );
    return $form;
}

//if range validation is unacceptable see optional code in

// function element_validate_range_shift($element){
//     if($element['#value'] > 25){
//         form_error($element, t('Shifting by more than 25 is silly'));
//     }
// }

function shift_cipher_form_validate($form, &$form_state){
    global $directions;
    $phrase = $form_state['values']['shift_phrase'];
    $direction = strtolower($form_state['values']['shift_direction']);
    $pattern = '/\d/';

    if(!(array_key_exists($direction, $directions)) && !(in_array($direction, $directions))){
        form_set_error('shift_direction', t('That is not a legal direction. Use "left" or "right"'));
    }

    if(preg_match($pattern, $phrase)){
        form_set_error('shift_phrase', t('Only letters and punctuation please. We can not shift numbers.'));
    }
}

function shift_cipher_form_submit($form, &$form_state){
    global $directions;
    global $alphabet;
    $shift_val = ($form_state['values']['shift_value']) % 26;
    $phrase = strtolower($form_state['values']['shift_phrase']);
    $direction = strtolower($form_state['values']['shift_direction']);
    $phrase_split = str_split($phrase);
    $new_phrase = array();

    foreach($phrase_split as $character){
        if(in_array($character, $alphabet)){
            if($direction == "l" || $direction =="left"){
                $new_key = array_search($character, $alphabet) - $shift_val;
                if($new_key < 1){
                    $new_key = $new_key + 26;
                }
                array_push($new_phrase, $alphabet[$new_key]);
            }

            if($direction == "r" || $direction =="right"){
                $new_key = array_search($character, $alphabet) + $shift_val;
                if($new_key > 26){
                    $new_key = $new_key - 26;
                }
                array_push($new_phrase, $alphabet[$new_key]);
            }
        }
        else {
            array_push($new_phrase, $character);
        }
    }

    $phrase_recombined = implode("", $new_phrase);
    $encoded_phrase = $phrase_recombined;




    $_SESSION['encoded_phrase'] = $encoded_phrase;
    $form_state['redirect'] = 'shift_cipher_encoded';
}

function shift_cipher_encoded(){
    $encoded_phrase = $_SESSION['encoded_phrase'];
    return $encoded_phrase;
}
